from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import keyboard as krb
import config as cf
from GAmefication import database as db
from database import DataBase
import os
storage=MemoryStorage()

db1=DataBase('bonus.db')

bot = Bot(token='7106909032:AAHSN6OOHppekDf4_pwxqBffVw-vWfsQmxw')
dp = Dispatcher(bot, storage=storage)

# –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
Chanel_id="-1002208916163"
Not_Sub_Message="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
async def on_startup(_):
    await db.db_start()
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

# –ö–ª–∞—Å—Å—ã –¥–ª—è FSM
class NewOrder(StatesGroup):
    name=State()
    price=State()
    photo=State()

class CancelOrder(StatesGroup):
    cancel = State()


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
def chek_chanel(chat_member):
    # print(chat_member['status'])
    if chat_member['status']!='left':
        return True
    else:
        return False
def creater(chat_member):
    if chat_member['status']=="creator":
        return True
    else:
        return False


# —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
    if chek_chanel(await bot.get_chat_member(chat_id=Chanel_id , user_id=message.from_user.id)):
        if not db1.user_exists(message.from_user.id):
            print(1)
            start_comand=message.text
            referer_id=str(start_comand[7:])
            if str(referer_id)!="":
                print(2)
                if str(referer_id) != str(message.from_user.id):
                    db1.add_user(message.from_user.id, referer_id)
                    print(referer_id)
                    try:
                        await bot.send_message(referer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    except Exception as ex:
                        print(ex)
                else:
                    db1.add_user(message.from_user.id)
                    await bot.send_message(message.from_user.id, "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            else:
                db1.add_user(message.from_user.id)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {full_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ......', reply_markup=krb.glav)

    else:
        await bot.send_message(message.from_user.id, Not_Sub_Message , reply_markup=krb.My_Chanel)

@dp.message_handler(commands=['admin_1_get_users'])
async def start(message: types.Message):

    await message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–∑!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(state=NewOrder.name)
async def start(message: types.Message , state: FSMContext):
    async with state.proxy() as data:
        data['name']=message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∏–∑", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(state=NewOrder.price)
async def start(message: types.Message , state: FSMContext):
    async with state.proxy() as data:
        data['price']=message.photo[0].file_id
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(lambda message: not message.photo, state=NewOrder.photo)
async def add_item_photo_check(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')

@dp.message_handler(content_types=['photo'], state=NewOrder.photo)
async def add_item_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await db.add_item(state)
    await message.answer('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    await state.finish()

@dp.callback_query_handler(text='cancel', state="*")
async def cancel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.message.answer (f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ......', reply_markup=krb.glav)

@dp.message_handler(commands=['admin'])
async def start(message: types.Message):
    if creater(await bot.get_chat_member(chat_id=Chanel_id, user_id=message.from_user.id)):
        await message.answer("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚úÖ")
        await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏—Ç —Ñ—Ä–∞–∑—É /admin_1_get_users\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞(")



# –∫–∞–ª–±—ç–∫–∏
@dp.callback_query_handler(text="sub")
async def subchanel(callback_query: types.CallbackQuery):
    user_name = callback_query.from_user.first_name
    user_last_name = callback_query.from_user.last_name
    full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    if chek_chanel(await bot.get_chat_member(chat_id=Chanel_id, user_id=callback_query.from_user.id)):
        await bot.send_message(callback_query.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {full_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ......', reply_markup=krb.glav)
    else:
        await bot.send_message(callback_query.from_user.id, Not_Sub_Message, reply_markup=krb.My_Chanel)


# —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.callback_query_handler(lambda query: query.data == 'profile')
async def Prof(callback_query: types.CallbackQuery):
    if callback_query.message.chat.type == 'private':
        user_name = callback_query.from_user.first_name
        user_last_name = callback_query.from_user.last_name
        user_id = callback_query.from_user.id
        referals_count = db1.count_referals(user_id)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_id
        full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
        await bot.send_message(callback_query.from_user.id, f'üë§ {full_name}\n\n–í–∞—à ID: {callback_query.from_user.id}\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üéÅ: https://t.me/{cf.BOT_NAME}?start={callback_query.from_user.id}\n\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals_count}')

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)